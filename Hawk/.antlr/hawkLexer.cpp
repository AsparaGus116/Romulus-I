
// Generated from c:/Users/gusbr/Desktop/CodingShit/Romulus-I/Hawk/hawkLexer.g4 by ANTLR 4.13.1


#include "hawkLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct HawkLexerStaticData final {
  HawkLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  HawkLexerStaticData(const HawkLexerStaticData&) = delete;
  HawkLexerStaticData(HawkLexerStaticData&&) = delete;
  HawkLexerStaticData& operator=(const HawkLexerStaticData&) = delete;
  HawkLexerStaticData& operator=(HawkLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag hawklexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
HawkLexerStaticData *hawklexerLexerStaticData = nullptr;

void hawklexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (hawklexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(hawklexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<HawkLexerStaticData>(
    std::vector<std::string>{
      "KBOOL", "KINT", "KCHAR", "KVOID", "KADD", "KSUB", "KMUL", "KDIV", 
      "KMOD", "KBAND", "KBOR", "KBNOT", "KNOT", "KXOR", "KOR", "KAND", "KSHL", 
      "KSHR", "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "LBRACE", "RBRACE", 
      "KASSIGN", "KADDASSIGN", "KSUBASSIGN", "KMULASSIGN", "KDIVASSIGN", 
      "KMODASSIGN", "KANDASSIGN", "KORASSIGN", "KNOTASSIGN", "KXORASSIGN", 
      "KSHLASSIGN", "KSHRASSIGN", "KQUESTION", "KCOLON", "KEQ", "KNE", "KG", 
      "KL", "KGE", "KLE", "KINC", "KDEC", "KSTATIC", "KCONST", "KSTRUCT", 
      "KIF", "KELSE", "KWHILE", "KDO", "KFOR", "COMMA", "SEMICOLON", "DOT", 
      "ARROW", "ID", "INT", "HEX", "BIN", "COMMENT", "BLOCKCOMMENT", "WS"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'bool'", "'int'", "'char'", "'void'", "'+'", "'-'", "'*'", "'/'", 
      "'%'", "'&'", "'|'", "'~'", "'!'", "'^'", "'||'", "'&&'", "'<<'", 
      "'>>'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'='", "'+='", "'-='", 
      "'*='", "'/='", "'%='", "'&='", "'|='", "'~='", "'^='", "'<<='", "'>>='", 
      "'\\u003F'", "':'", "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", 
      "'++'", "'--'", "'static'", "'const'", "'struct'", "'if'", "'else'", 
      "'while'", "'do'", "'for'", "','", "';'", "'.'", "'->'"
    },
    std::vector<std::string>{
      "", "KBOOL", "KINT", "KCHAR", "KVOID", "KADD", "KSUB", "KMUL", "KDIV", 
      "KMOD", "KBAND", "KBOR", "KBNOT", "KNOT", "KXOR", "KOR", "KAND", "KSHL", 
      "KSHR", "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "LBRACE", "RBRACE", 
      "KASSIGN", "KADDASSIGN", "KSUBASSIGN", "KMULASSIGN", "KDIVASSIGN", 
      "KMODASSIGN", "KANDASSIGN", "KORASSIGN", "KNOTASSIGN", "KXORASSIGN", 
      "KSHLASSIGN", "KSHRASSIGN", "KQUESTION", "KCOLON", "KEQ", "KNE", "KG", 
      "KL", "KGE", "KLE", "KINC", "KDEC", "KSTATIC", "KCONST", "KSTRUCT", 
      "KIF", "KELSE", "KWHILE", "KDO", "KFOR", "COMMA", "SEMICOLON", "DOT", 
      "ARROW", "ID", "INT", "HEX", "BIN", "COMMENT", "BLOCKCOMMENT", "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,65,368,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,
  	2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,
  	1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,
  	1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,
  	1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,
  	1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,
  	1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,36,
  	1,36,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,41,1,41,1,42,
  	1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,45,1,46,1,46,1,46,
  	1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,
  	1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,
  	1,51,1,51,1,51,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,54,1,54,1,55,1,55,
  	1,56,1,56,1,57,1,57,1,57,1,58,1,58,5,58,310,8,58,10,58,12,58,313,9,58,
  	1,59,4,59,316,8,59,11,59,12,59,317,1,60,1,60,1,60,1,60,4,60,324,8,60,
  	11,60,12,60,325,1,61,1,61,1,61,1,61,4,61,332,8,61,11,61,12,61,333,1,62,
  	1,62,1,62,1,62,5,62,340,8,62,10,62,12,62,343,9,62,1,62,1,62,1,63,1,63,
  	1,63,1,63,1,63,5,63,352,8,63,10,63,12,63,355,9,63,1,63,1,63,1,63,1,63,
  	1,63,1,64,4,64,363,8,64,11,64,12,64,364,1,64,1,64,1,353,0,65,1,1,3,2,
  	5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
  	16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
  	55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,
  	39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,
  	101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,
  	121,61,123,62,125,63,127,64,129,65,1,0,7,3,0,65,90,95,95,97,122,4,0,48,
  	57,65,90,95,95,97,122,1,0,48,57,3,0,48,57,65,70,97,102,1,0,48,49,2,0,
  	10,10,13,13,3,0,9,10,12,13,32,32,375,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
  	0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
  	17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
  	0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
  	0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,
  	49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,
  	0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
  	0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,
  	81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,
  	0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,
  	0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,
  	0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,
  	0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,1,131,1,0,0,
  	0,3,136,1,0,0,0,5,140,1,0,0,0,7,145,1,0,0,0,9,150,1,0,0,0,11,152,1,0,
  	0,0,13,154,1,0,0,0,15,156,1,0,0,0,17,158,1,0,0,0,19,160,1,0,0,0,21,162,
  	1,0,0,0,23,164,1,0,0,0,25,166,1,0,0,0,27,168,1,0,0,0,29,170,1,0,0,0,31,
  	173,1,0,0,0,33,176,1,0,0,0,35,179,1,0,0,0,37,182,1,0,0,0,39,184,1,0,0,
  	0,41,186,1,0,0,0,43,188,1,0,0,0,45,190,1,0,0,0,47,192,1,0,0,0,49,194,
  	1,0,0,0,51,196,1,0,0,0,53,199,1,0,0,0,55,202,1,0,0,0,57,205,1,0,0,0,59,
  	208,1,0,0,0,61,211,1,0,0,0,63,214,1,0,0,0,65,217,1,0,0,0,67,220,1,0,0,
  	0,69,223,1,0,0,0,71,227,1,0,0,0,73,231,1,0,0,0,75,233,1,0,0,0,77,235,
  	1,0,0,0,79,238,1,0,0,0,81,241,1,0,0,0,83,243,1,0,0,0,85,245,1,0,0,0,87,
  	248,1,0,0,0,89,251,1,0,0,0,91,254,1,0,0,0,93,257,1,0,0,0,95,264,1,0,0,
  	0,97,270,1,0,0,0,99,277,1,0,0,0,101,280,1,0,0,0,103,285,1,0,0,0,105,291,
  	1,0,0,0,107,294,1,0,0,0,109,298,1,0,0,0,111,300,1,0,0,0,113,302,1,0,0,
  	0,115,304,1,0,0,0,117,307,1,0,0,0,119,315,1,0,0,0,121,319,1,0,0,0,123,
  	327,1,0,0,0,125,335,1,0,0,0,127,346,1,0,0,0,129,362,1,0,0,0,131,132,5,
  	98,0,0,132,133,5,111,0,0,133,134,5,111,0,0,134,135,5,108,0,0,135,2,1,
  	0,0,0,136,137,5,105,0,0,137,138,5,110,0,0,138,139,5,116,0,0,139,4,1,0,
  	0,0,140,141,5,99,0,0,141,142,5,104,0,0,142,143,5,97,0,0,143,144,5,114,
  	0,0,144,6,1,0,0,0,145,146,5,118,0,0,146,147,5,111,0,0,147,148,5,105,0,
  	0,148,149,5,100,0,0,149,8,1,0,0,0,150,151,5,43,0,0,151,10,1,0,0,0,152,
  	153,5,45,0,0,153,12,1,0,0,0,154,155,5,42,0,0,155,14,1,0,0,0,156,157,5,
  	47,0,0,157,16,1,0,0,0,158,159,5,37,0,0,159,18,1,0,0,0,160,161,5,38,0,
  	0,161,20,1,0,0,0,162,163,5,124,0,0,163,22,1,0,0,0,164,165,5,126,0,0,165,
  	24,1,0,0,0,166,167,5,33,0,0,167,26,1,0,0,0,168,169,5,94,0,0,169,28,1,
  	0,0,0,170,171,5,124,0,0,171,172,5,124,0,0,172,30,1,0,0,0,173,174,5,38,
  	0,0,174,175,5,38,0,0,175,32,1,0,0,0,176,177,5,60,0,0,177,178,5,60,0,0,
  	178,34,1,0,0,0,179,180,5,62,0,0,180,181,5,62,0,0,181,36,1,0,0,0,182,183,
  	5,40,0,0,183,38,1,0,0,0,184,185,5,41,0,0,185,40,1,0,0,0,186,187,5,91,
  	0,0,187,42,1,0,0,0,188,189,5,93,0,0,189,44,1,0,0,0,190,191,5,123,0,0,
  	191,46,1,0,0,0,192,193,5,125,0,0,193,48,1,0,0,0,194,195,5,61,0,0,195,
  	50,1,0,0,0,196,197,5,43,0,0,197,198,5,61,0,0,198,52,1,0,0,0,199,200,5,
  	45,0,0,200,201,5,61,0,0,201,54,1,0,0,0,202,203,5,42,0,0,203,204,5,61,
  	0,0,204,56,1,0,0,0,205,206,5,47,0,0,206,207,5,61,0,0,207,58,1,0,0,0,208,
  	209,5,37,0,0,209,210,5,61,0,0,210,60,1,0,0,0,211,212,5,38,0,0,212,213,
  	5,61,0,0,213,62,1,0,0,0,214,215,5,124,0,0,215,216,5,61,0,0,216,64,1,0,
  	0,0,217,218,5,126,0,0,218,219,5,61,0,0,219,66,1,0,0,0,220,221,5,94,0,
  	0,221,222,5,61,0,0,222,68,1,0,0,0,223,224,5,60,0,0,224,225,5,60,0,0,225,
  	226,5,61,0,0,226,70,1,0,0,0,227,228,5,62,0,0,228,229,5,62,0,0,229,230,
  	5,61,0,0,230,72,1,0,0,0,231,232,5,63,0,0,232,74,1,0,0,0,233,234,5,58,
  	0,0,234,76,1,0,0,0,235,236,5,61,0,0,236,237,5,61,0,0,237,78,1,0,0,0,238,
  	239,5,33,0,0,239,240,5,61,0,0,240,80,1,0,0,0,241,242,5,62,0,0,242,82,
  	1,0,0,0,243,244,5,60,0,0,244,84,1,0,0,0,245,246,5,62,0,0,246,247,5,61,
  	0,0,247,86,1,0,0,0,248,249,5,60,0,0,249,250,5,61,0,0,250,88,1,0,0,0,251,
  	252,5,43,0,0,252,253,5,43,0,0,253,90,1,0,0,0,254,255,5,45,0,0,255,256,
  	5,45,0,0,256,92,1,0,0,0,257,258,5,115,0,0,258,259,5,116,0,0,259,260,5,
  	97,0,0,260,261,5,116,0,0,261,262,5,105,0,0,262,263,5,99,0,0,263,94,1,
  	0,0,0,264,265,5,99,0,0,265,266,5,111,0,0,266,267,5,110,0,0,267,268,5,
  	115,0,0,268,269,5,116,0,0,269,96,1,0,0,0,270,271,5,115,0,0,271,272,5,
  	116,0,0,272,273,5,114,0,0,273,274,5,117,0,0,274,275,5,99,0,0,275,276,
  	5,116,0,0,276,98,1,0,0,0,277,278,5,105,0,0,278,279,5,102,0,0,279,100,
  	1,0,0,0,280,281,5,101,0,0,281,282,5,108,0,0,282,283,5,115,0,0,283,284,
  	5,101,0,0,284,102,1,0,0,0,285,286,5,119,0,0,286,287,5,104,0,0,287,288,
  	5,105,0,0,288,289,5,108,0,0,289,290,5,101,0,0,290,104,1,0,0,0,291,292,
  	5,100,0,0,292,293,5,111,0,0,293,106,1,0,0,0,294,295,5,102,0,0,295,296,
  	5,111,0,0,296,297,5,114,0,0,297,108,1,0,0,0,298,299,5,44,0,0,299,110,
  	1,0,0,0,300,301,5,59,0,0,301,112,1,0,0,0,302,303,5,46,0,0,303,114,1,0,
  	0,0,304,305,5,45,0,0,305,306,5,62,0,0,306,116,1,0,0,0,307,311,7,0,0,0,
  	308,310,7,1,0,0,309,308,1,0,0,0,310,313,1,0,0,0,311,309,1,0,0,0,311,312,
  	1,0,0,0,312,118,1,0,0,0,313,311,1,0,0,0,314,316,7,2,0,0,315,314,1,0,0,
  	0,316,317,1,0,0,0,317,315,1,0,0,0,317,318,1,0,0,0,318,120,1,0,0,0,319,
  	320,5,48,0,0,320,321,5,120,0,0,321,323,1,0,0,0,322,324,7,3,0,0,323,322,
  	1,0,0,0,324,325,1,0,0,0,325,323,1,0,0,0,325,326,1,0,0,0,326,122,1,0,0,
  	0,327,328,5,48,0,0,328,329,5,98,0,0,329,331,1,0,0,0,330,332,7,4,0,0,331,
  	330,1,0,0,0,332,333,1,0,0,0,333,331,1,0,0,0,333,334,1,0,0,0,334,124,1,
  	0,0,0,335,336,5,47,0,0,336,337,5,47,0,0,337,341,1,0,0,0,338,340,8,5,0,
  	0,339,338,1,0,0,0,340,343,1,0,0,0,341,339,1,0,0,0,341,342,1,0,0,0,342,
  	344,1,0,0,0,343,341,1,0,0,0,344,345,6,62,0,0,345,126,1,0,0,0,346,347,
  	5,47,0,0,347,348,5,42,0,0,348,353,1,0,0,0,349,352,9,0,0,0,350,352,3,129,
  	64,0,351,349,1,0,0,0,351,350,1,0,0,0,352,355,1,0,0,0,353,354,1,0,0,0,
  	353,351,1,0,0,0,354,356,1,0,0,0,355,353,1,0,0,0,356,357,5,42,0,0,357,
  	358,5,47,0,0,358,359,1,0,0,0,359,360,6,63,0,0,360,128,1,0,0,0,361,363,
  	7,6,0,0,362,361,1,0,0,0,363,364,1,0,0,0,364,362,1,0,0,0,364,365,1,0,0,
  	0,365,366,1,0,0,0,366,367,6,64,0,0,367,130,1,0,0,0,9,0,311,317,325,333,
  	341,351,353,364,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  hawklexerLexerStaticData = staticData.release();
}

}

hawkLexer::hawkLexer(CharStream *input) : Lexer(input) {
  hawkLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *hawklexerLexerStaticData->atn, hawklexerLexerStaticData->decisionToDFA, hawklexerLexerStaticData->sharedContextCache);
}

hawkLexer::~hawkLexer() {
  delete _interpreter;
}

std::string hawkLexer::getGrammarFileName() const {
  return "hawkLexer.g4";
}

const std::vector<std::string>& hawkLexer::getRuleNames() const {
  return hawklexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& hawkLexer::getChannelNames() const {
  return hawklexerLexerStaticData->channelNames;
}

const std::vector<std::string>& hawkLexer::getModeNames() const {
  return hawklexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& hawkLexer::getVocabulary() const {
  return hawklexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView hawkLexer::getSerializedATN() const {
  return hawklexerLexerStaticData->serializedATN;
}

const atn::ATN& hawkLexer::getATN() const {
  return *hawklexerLexerStaticData->atn;
}




void hawkLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  hawklexerLexerInitialize();
#else
  ::antlr4::internal::call_once(hawklexerLexerOnceFlag, hawklexerLexerInitialize);
#endif
}
